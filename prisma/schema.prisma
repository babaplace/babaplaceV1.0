// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum appartementVerified {
  pending
  finish
  reset
}

model appartement {
  id String @id @default(cuid())

  title String

  city     String
  quartier String?
  verified appartementVerified @default(pending)
  address  String?

  numberChambres  Int
  numberToilettes Int @default(0)
  niveauEtage     Int

  numberCuisine Int @default(0)
  numberSalons  Int @default(0)

  price   Float
  caution Float?

  description String?

  ownerId String
  Owner   User   @relation(fields: [ownerId], references: [id])

  status appartementStatus?

  medias medias[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]
}

enum status {
  disponible
  occuped
  soon
}

model appartementStatus {
  id     String @id @default(cuid())
  status status @default(disponible) //disponible - occuped - soon

  dateDisponible DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appartementId String @unique

  appartement appartement @relation(references: [id], fields: [appartementId], onDelete: Cascade)
}

model medias {
  id   String @id @default(cuid())
  url  String
  type String @default("image") //image - video

  size Float?

  appartementId String
  appartement   appartement @relation(references: [id], fields: [appartementId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum role {
  agence
  bailleur
  client
}

enum subjectContact {
  partneriat
  contact
}

model Contact {
  id      String         @id @default(cuid())
  role    role           @default(client)
  name    String?
  email   String
  message String?
  subject subjectContact @default(contact)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id            String        @id @default(cuid())
  userId        String
  appartementId String
  startDate     DateTime
  endDate       DateTime
  status        BookingStatus @default(PENDING) // PENDING - CONFIRMED - CANCELLED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  appartement appartement @relation(fields: [appartementId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

// auth

enum userRole {
  user
  admin
  partner
  certificated
}

model User {
  id   String  @id @default(cuid())
  name String?

  firstName String?

  email String? @unique

  phone String?

  role userRole @default(user) //user - admin - partner

  password String?

  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appartements appartement[]
  Booking      Booking[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
